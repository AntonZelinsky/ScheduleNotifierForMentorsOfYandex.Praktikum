import datetime
import logging

from fastapi import BackgroundTasks
from notion_client import APIResponseError, Client

from app.schemas import DutyPageCreate
from app.services import UserService
from core.config import get_settings
from core.database import SessionLocal
from core.models import Cohort
from helpers import Expando, Objectify

user_service: UserService = UserService(BackgroundTasks(), SessionLocal())


def create_client():
    settings = get_settings()
    notion_token = settings.notion_token

    client = Client(auth=notion_token)

    return client


def get_users_data(cohorts: list[Cohort]) -> dict:
    raw_data = get_users_raw_data(cohorts)
    users_data = group_by_user_raw_data(raw_data)
    return users_data


def get_users_raw_data(cohorts: list[Cohort]) -> list:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–µ–∂—É—Ä—Å—Ç–≤–∞ –≤–æ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."""
    client = create_client()
    date = datetime.date.today().__str__()
    users_raw_data = list()
    for notion_database in cohorts:
        try:
            response = client.databases.query(
                **{
                    "database_id": notion_database.notion_db_id,
                    "filter": {
                        "property": "–î–∞—Ç–∞",
                        "date": {
                            "equals": date,
                        },
                    },
                }
            )
            response = Objectify(response)
        except APIResponseError as e:
            raise ValueError(f'Notion fell: {e}')

        for item in response.results:
            properties = item.properties
            user_data = Expando()
            # TODO –Ω–∞–∑–≤–∞—Ç—å —á–µ–ª–æ–≤–µ—á–Ω–µ–µ
            user_data.database = notion_database

            name = properties.Name.title
            if name:
                print(name[0].plain_text)
                user_data.name = name[0].plain_text

            # email = properties.Email.rich_text
            # if email:
            #     print(email[0].plain_text)
            #     user_data.email = email[0].plain_text

            telegram_id = properties.telegram_id.rich_text
            if telegram_id:
                print(telegram_id[0].plain_text)
                user_data.telegram_id = telegram_id[0].plain_text

            users_raw_data.append(user_data)

    return users_raw_data


def group_by_user_raw_data(raw_data: list) -> dict:
    """
    –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ—Ö –¥–µ–∂—É—Ä–Ω—ã—Ö –ø–æ —é–∑–µ—Ä–∞–º,
    —Ç.–∫. –æ–¥–∏–Ω —é–∑–µ—Ä –º–æ–∂–µ—Ç –¥–µ–∂—É—Ä–∏—Ç—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–≥–æ—Ä—Ç–∞—Ö.
    """
    users_group_data = {}
    for user_data in raw_data:
        if user_data.email in users_group_data:
            users_group_data[user_data.email]['databases'] \
                .append(user_data.database)
        else:
            user_dist_data = {
                user_data.email: {
                    'name': user_data.name,
                    'email': user_data.email,
                    'telegram_id': user_data.telegram_id,
                    'databases': [user_data.database]
                }
            }
            users_group_data.update(user_dist_data)
    return users_group_data


def get_last_duties_by_cohort(cohort: Cohort, count_days: int = 7) -> dict:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ `:count` –∫—Ä–∞–π–Ω–∏—Ö –¥–µ–∂—É—Ä—Å—Ç–≤ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
    –î–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ–º.
    :param cohort: –∫–æ–≥–æ—Ä—Ç–∞,
    :param count_days: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞,
    :return:
        {
            'last_mentors_ids': tuple, –∫—Ä–∞–π–Ω–∏–µ –¥–µ–∂—É—Ä—Å—Ç–≤–∞. **–ü–æ—Ä—è–¥–æ–∫ –æ–±—Ä–∞—Ç–Ω—ã–π --** –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫ –ø–µ—Ä–≤–æ–º—É.
            'actual_date': date(%Y-%m-%d), –∫—Ä–∞–π–Ω—è—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ (%Y-%m-%d)
        }
    """
    date_now = datetime.date.today().__str__()
    databases_duties = query_databases_duties(
        database_id=cohort.notion_db_id,
        date=date_now,
        page_size=count_days,
    )

    if len(databases_duties) < 2:
        logging.error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ù—É–∂–µ–Ω –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω —Ü–∏–∫–ª –¥–µ–∂—É—Ä—Å—Ç–≤ –≤ –±—É–¥—É—â–µ–º.')
        return False
    last_duties = [duty.properties for duty in databases_duties]
    last_duties = sorted(last_duties, key=lambda duty: duty.–î–∞—Ç–∞.date.start, reverse=True)
    actual_date = datetime.datetime.strptime(last_duties[0].–î–∞—Ç–∞.date.start, '%Y-%m-%d').date()
    last_mentors_ids = tuple(dict(
        id=duty.–î–µ–∂—É—Ä–Ω—ã–π.people[0].id,
        name=duty.–î–µ–∂—É—Ä–Ω—ã–π.people[0].name
    ) for duty in last_duties)
    last_mentors = {
        "last_mentors": last_mentors_ids,
        "actual_date": actual_date
    }

    return last_mentors


def find_cycle_by_last_duties(last_duties: tuple) -> tuple:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ü–∏–∫–ª –¥–µ–∂—É—Ä—Å—Ç–≤ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤ –∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—Ä–∞–π–Ω–∏—Ö –¥–µ–∂—É—Ä—Å—Ç–≤.
    –ü–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ–º, —á—Ç–æ —Ü–∏–∫–ª —Ç–æ—á–Ω–æ –µ—Å—Ç—å, –º–∏–Ω–∏–º—É–º 1.
    –ß—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –æ–¥–Ω–æ–º—É.
    –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–∞ **–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.**
    :return: tuple. –í–µ—Ä–Ω—É—Ç—å **–≤ –ø—Ä—è–º–æ–º –ø–æ—Ä—è–¥–∫–µ.**
    """
    cycle = []
    for i, mentor in enumerate(last_duties):
        if mentor in cycle:
            break
        cycle.insert(i, mentor)
    return tuple(reversed(cycle))


def make_timeline(cycle: tuple, start_date: str, set_period: int) -> list:
    """
    –°–¥–µ–ª–∞—Ç—å —Å–ø–∏—Å–æ–∫-—Ç–∞–π–º–ª–∞–π–Ω. –í —Å–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–∂–¥—É—é –¥–∞—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫.
    :param cycle: —Ü–∏–∫–ª –¥–µ–∂—É—Ä—Å—Ç–≤,
    :param start_date: –∫—Ä–∞–π–Ω—è—è –¥–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è,
    :param set_period: –∫–æ–ª-–≤–æ –¥–Ω–µ–π –¥–æ–±–∞–≤–ª—è–µ–º—ã—Ö –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é,
    :return: –°–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ :set_interval –¥–Ω–µ–π, –æ—Ç :start_date + 1. –ù–∞ –∫–∞–∂–¥—É—é –¥–∞—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫.
    """
    future_duties = [None] * set_period
    duty_date = start_date
    for i in range(set_period):
        duty_date += datetime.timedelta(days=1)
        future_duties[i] = (dict(mentor=cycle[i % len(cycle)], date=duty_date))

    return future_duties


# TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π
def add_duties_to_cohort(cohort: Cohort, max_days: int = 14):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–≥–æ—Ä—Ç—ã
    :param cohort: –∫–æ–≥–æ—Ä—Ç–∞
    :param max_days: –∫–æ–ª-–≤–æ –¥–Ω–µ–π –¥–æ–±–∞–≤–ª—è–µ–º—ã—Ö –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é,
    :return: —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ—É—à–µ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü
    """

    last_duties = get_last_duties_by_cohort(cohort)
    if not last_duties:
        return False

    need_days = datetime.date.today() + datetime.timedelta(days=max_days) - last_duties['actual_date']
    need_days = need_days.days
    if need_days < 1:
        logging.info(f'–ö–æ–≥–æ—Ä—Ç–∞ "{cohort.name}" –Ω–µ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. '
                     f'–ü–æ—Ö–æ–∂–µ, –æ–Ω–æ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –Ω–∞ {max_days} –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥.')
        return False

    cycle = find_cycle_by_last_duties(last_duties['last_mentors'])
    timeline = make_timeline(cycle, last_duties['actual_date'], need_days)

    added = []
    for duty in timeline:
        added_page_id = create_duty_page(DutyPageCreate(
            database_id=cohort.notion_db_id,
            date=duty['date'],
            mentor_name=duty['mentor']['name'],
            notion_user_id=duty['mentor']['id'],
        ))
        added.append(added_page_id)
    return added


def create_duty_page(duty_page: DutyPageCreate) -> int:
    client = create_client()

    response = client.pages.create(
        **{
            "parent": {
                "database_id": str(duty_page.database_id)
            },
            "properties": {
                "–î–∞—Ç–∞": {
                    "date": {
                        "start": str(duty_page.date),
                        "end": None
                    }
                },
                "Name": {
                    "title": [
                        {
                            "text": {
                                "content": duty_page.mentor_name
                            }
                        }
                    ]
                },
                "–î–µ–∂—É—Ä–Ω—ã–π": {
                    "people": [
                        {
                            "object": "user",
                            "id": str(duty_page.notion_user_id)
                        }
                    ]
                }
            },
            "children": [
                {
                    "object": "block",
                    "type": "callout",
                    "callout": {
                        "text": [{
                            "type": "text",
                            "text": {
                                "content": "–ê–≤—Ç–æ—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ"
                            }
                        }],
                        "icon": {
                            "emoji": "ü§ñ"
                        }
                    }
                }
            ]
        }
    )
    return response['id']


def query_databases_duties(database_id: str, date: str, page_size: int) -> list:
    client = create_client()

    response = client.databases.query(
        **{
            "database_id": database_id,
            "filter": {
                "property": "–î–∞—Ç–∞",
                "date": {
                    "on_or_after": date
                }
            },
            "sorts": [{
                "property": "–î–∞—Ç–∞",
                "timestamp": "created_time",
                "direction": "descending"
            }],
            "page_size": page_size
        }
    )
    response = Objectify(response)
    return response.results
