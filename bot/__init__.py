import datetime
import logging
from queue import Queue
from threading import Thread

import notion
from app.services import CohortService
from core import config
from core.database import SessionLocal
from helpers import Objectify

from core.config import get_settings


settings = get_settings()

# –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏
NAME, EMAIL = range(2)
REPLY_KEYBOARD = [['–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ', '–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –ø–æ—á—Ç—ã']]


def start(update, context):
    """ –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º """
    context.bot.send_message(chat_id=update.effective_chat.id,
                             text=f"–ü—Ä–∏–≤–µ—Ç! –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–∂—É—Ä—Å—Ç–≤–µ"
                             " —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    logging.info(f'–î–æ–±–∞–≤–∏–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º {update.effective_chat.full_name}, '
                 f'—é–∑–µ—Ä–Ω–µ–π–º–æ–º {update.effective_chat.username} –∏ id {update.effective_chat.id}')
    return NAME


def request_email(update, context):
    """ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º–µ–π–ª, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω –∞–∫–∫–∞—É–Ω—Ç –Ω–æ—É—à–µ–Ω–∞ """
    answer = update.message.text

    if answer == REPLY_KEYBOARD[0][1]:
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text=f'–û–∫–µ–π, –¥–∞–≤–∞–π –∏–∑–º–µ–Ω–∏–º —Ç–≤–æ—é –ø–æ—á—Ç—É.\nüëá')

    else:
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text=f'–û—Ç–ª–∏—á–Ω–æ!\n{answer}, –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
                                 ' –ø—Ä–∏—à–ª–∏ –º–Ω–µ e-mail, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç Notion.\nüëá')
        logging.info(f'–£ –Ω–∞—Å –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {answer}')

    return EMAIL


def verify_email(update, context):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ –Ω–∞ –ø–æ—á—Ç—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    –î–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑
    """
    email = update.message.text

    if email == REPLY_KEYBOARD[0][0]:
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text='–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑.')
        logging.info('–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ')

    elif email == REPLY_KEYBOARD[0][1]:
        request_email(update=update, context=context)
        logging.info(f'–ü—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—á—Ç—ã')

    else:
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text=f'–°—É–ø–µ—Ä, –º—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –Ω–∞ –ø–æ—á—Ç—É {email}.'
                                 '\n–°–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ –ø–∏—Å—å–º–µ —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!',
                                 reply_markup=ReplyKeyboardMarkup(REPLY_KEYBOARD, one_time_keyboard=True))
        logging.info(f'–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π email: {email}')


def stop(update, context):
    """ –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ """
    context.bot.send_message(chat_id=update.effective_chat.id,
                             text='–£–≤–∏–¥–∏–º—Å—è!')


service: CohortService = CohortService(SessionLocal())


def callback_morning_reminder(context: CallbackContext):
    cohorts = service.get_cohorts()
    users = notion.get_users_data(cohorts)

    for user_data in users.values():
        user = Objectify(user_data)
        if user.telegram_id:
            # TODO –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –Ω–∞–ª–∏—á–∏–µ telegram_id –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º?
            # –∏–ª–∏ –±—É–¥—É—Ç —Ä–∞–∑–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–æ—Å—Ç–∞–≤–∫–∏?
            # –ø–æ–∫–∞ –¥–æ–±–∞–≤–∏–ª __getattr__ –≤ class Expando
            context.bot.send_message(chat_id=user.telegram_id,
                                     text=f'–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {user.name}. –ù–∞–ø–æ–º–∏–Ω–∞—é, —Ç—ã —Å–µ–≥–æ–¥–Ω—è –¥–µ–∂—É—Ä–∏—à—å.\n'
                                          f'–í {" –∏ ".join([cohort.name for cohort in user.databases])}\n\n'
                                          '–ñ–µ–ª–∞—é —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!')
            logging.info(f'{user.name} c id {user.telegram_id} –ø–æ–ª—É—á–∏–ª —É—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–µ–∂—É—Ä—Å—Ç–≤–µ')


def callback_evening_reminder(context: CallbackContext):
    cohorts = service.get_cohorts()
    users = notion.get_users_data(cohorts)

    for user_data in users.values():
        user = Objectify(user_data)
        if user.telegram_id:
            context.bot.send_message(chat_id=user.telegram_id,
                                     text=f'–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, {user.name}. –ï—â—ë —Ä–∞–∑ –Ω–∞–ø–æ–º–∏–Ω–∞—é, —Ç—ã —Å–µ–≥–æ–¥–Ω—è –¥–µ–∂—É—Ä–∏—à—å.\n'
                                          f'–í {" –∏ ".join([cohort.name for cohort in user.databases])}\n\n'
                                          '–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏!')
            logging.info(f'{user.name} c id {user.telegram_id} –ø–æ–ª—É—á–∏–ª –≤–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–µ–∂—É—Ä—Å—Ç–≤–µ')


def init_webhook(token, webhook_url):
    bot = Bot(token)
    update_queue = Queue()
    job_queue = JobQueue()
    dispatcher = Dispatcher(bot, update_queue, job_queue=job_queue)
    job_queue.set_dispatcher(dispatcher)

    success_setup = bot.set_webhook(webhook_url)
    if not success_setup:
        raise AttributeError("Cannot set up telegram webhook")
    thread = Thread(target=dispatcher.start, name='dispatcher')
    thread.start()

    logging.info('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫')
    return dispatcher


def init_pooling(token):
    updater = Updater(token, use_context=True)
    updater.start_polling()

    logging.info('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ –ø—É–ª–∏–Ω–≥')
    return updater.dispatcher


def init():
    token = settings.telegram_token
    if settings.domain_address:
        webhook_url = f'{settings.domain_address}/{token}/telegramWebhook'
        dispatcher = init_webhook(token, webhook_url)
    else:
        dispatcher = init_pooling(token)

    time = datetime.time(hour=settings.morning_reminder_hour, tzinfo=timezone("Europe/Warsaw"))
    dispatcher.job_queue.run_daily(callback_morning_reminder, time)

    time = datetime.time(hour=settings.evening_reminder_hour, tzinfo=timezone("Europe/Warsaw"))
    dispatcher.job_queue.run_daily(callback_evening_reminder, time)

    dispatcher.add_handler(conv_handler)

    return dispatcher
